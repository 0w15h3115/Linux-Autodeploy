#!/bin/bash

# Ubuntu Security Tools Installation Script
# This script installs various security analysis tools on Ubuntu

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[+]${NC} $1"
}

print_error() {
    echo -e "${RED}[!]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[*]${NC} $1"
}

# Check if running as root
if [[ $EUID -ne 0 ]]; then
   print_error "This script must be run as root (use sudo)"
   exit 1
fi

print_status "Starting security tools installation..."

# Update system
print_status "Updating package lists..."
apt update

print_status "Upgrading existing packages..."
apt upgrade -y

# Install essential build tools and dependencies
print_status "Installing essential dependencies..."
apt install -y \
    build-essential \
    python3 \
    python3-pip \
    python3-venv \
    git \
    curl \
    wget \
    libssl-dev \
    libffi-dev \
    python3-dev \
    python3-setuptools \
    libpcap-dev \
    libgmp3-dev \
    libxml2-dev \
    libxslt1-dev \
    zlib1g-dev

# 1. Install nmap (includes ncat)
print_status "Installing nmap and ncat..."
apt install -y nmap

# 2. Install ping (usually pre-installed, but just in case)
print_status "Installing ping utilities..."
apt install -y iputils-ping

# 3. Install binwalk
print_status "Installing binwalk..."
apt install -y binwalk

# 4. Install smbclient
print_status "Installing smbclient..."
apt install -y smbclient

# 5. Install dnsutils (assuming this is what you meant by dnstool)
print_status "Installing DNS tools..."
apt install -y dnsutils dnsrecon dnsenum

# 6. Install i3 window manager
print_status "Installing i3 window manager..."
apt install -y i3 i3status i3lock xss-lock dmenu

# 7. Install Python-based tools
print_status "Setting up Python environment for security tools..."

# Upgrade pip
python3 -m pip install --upgrade pip

# Install impacket
print_status "Installing impacket..."
python3 -m pip install impacket

# Install netexec (formerly crackmapexec)
print_status "Installing netexec..."
python3 -m pip install netexec

# Install certipy-ad
print_status "Installing certipy..."
python3 -m pip install certipy-ad

# 8. Install Obsidian
print_status "Installing Obsidian..."
# Check if snap is installed, if not install it
if ! command -v snap &> /dev/null; then
    print_warning "Snap not found, installing..."
    apt install -y snapd
    systemctl enable --now snapd.socket
    # Create symlink for classic snap support
    ln -s /var/lib/snapd/snap /snap 2>/dev/null || true
fi

# Install Obsidian via snap
snap install obsidian --classic || {
    print_warning "Snap installation failed, trying AppImage method..."
    # Alternative: Download AppImage
    wget -O /tmp/obsidian.AppImage "https://github.com/obsidianmd/obsidian-releases/releases/latest/download/Obsidian-1.5.3.AppImage"
    chmod +x /tmp/obsidian.AppImage
    mv /tmp/obsidian.AppImage /usr/local/bin/obsidian
    print_status "Obsidian AppImage installed to /usr/local/bin/obsidian"
}

# Add Python scripts to PATH
print_status "Configuring PATH..."

# Create profile.d script to ensure Python scripts are in PATH
cat > /etc/profile.d/security-tools.sh << 'EOF'
# Add Python user base bin to PATH
if [ -d "$HOME/.local/bin" ]; then
    export PATH="$HOME/.local/bin:$PATH"
fi

# Add Python3 scripts to PATH
if [ -d "/usr/local/bin" ]; then
    export PATH="/usr/local/bin:$PATH"
fi
EOF

chmod +x /etc/profile.d/security-tools.sh

# Create symbolic links for Python tools if needed
print_status "Creating symbolic links for Python tools..."

# Find where pip installed the tools
PYTHON_BIN=$(python3 -m site --user-base)/bin

# Create symlinks in /usr/local/bin for system-wide access
for tool in impacket netexec certipy; do
    # Find the actual binary
    if [ -f "$PYTHON_BIN/$tool" ]; then
        ln -sf "$PYTHON_BIN/$tool" /usr/local/bin/
    elif [ -f "/usr/local/bin/$tool" ]; then
        print_status "$tool already in /usr/local/bin"
    else
        # Try to find it in the system Python path
        TOOL_PATH=$(find /usr -name "$tool" -type f -executable 2>/dev/null | grep -E "(bin|scripts)" | head -1)
        if [ -n "$TOOL_PATH" ]; then
            ln -sf "$TOOL_PATH" /usr/local/bin/
        fi
    fi
done

# Verify installations
print_status "Verifying installations..."
echo ""
echo "=== Installation Status ==="

# Function to check if command exists
check_tool() {
    if command -v $1 &> /dev/null; then
        echo -e "${GREEN}✓${NC} $1 installed successfully"
        $1 --version 2>/dev/null || $1 -v 2>/dev/null || echo "   Version info not available"
    else
        echo -e "${RED}✗${NC} $1 installation failed or not in PATH"
    fi
}

check_tool nmap
check_tool ncat
check_tool ping
check_tool binwalk
check_tool smbclient
check_tool i3

# Check Python tools
echo ""
echo "Python tools:"
python3 -m pip show impacket &>/dev/null && echo -e "${GREEN}✓${NC} impacket installed" || echo -e "${RED}✗${NC} impacket not found"
command -v netexec &>/dev/null && echo -e "${GREEN}✓${NC} netexec installed" || echo -e "${RED}✗${NC} netexec not found"
command -v certipy &>/dev/null && echo -e "${GREEN}✓${NC} certipy installed" || echo -e "${RED}✗${NC} certipy not found"

# Check Obsidian
if command -v obsidian &>/dev/null || [ -f /usr/local/bin/obsidian ]; then
    echo -e "${GREEN}✓${NC} Obsidian installed"
else
    echo -e "${RED}✗${NC} Obsidian not found"
fi

# Check DNS tools
echo ""
echo "DNS tools:"
check_tool nslookup
check_tool dig
check_tool dnsrecon
check_tool dnsenum

print_status "Installation complete!"
print_warning "Please log out and log back in for PATH changes to take full effect."
print_warning "Alternatively, run: source /etc/profile.d/security-tools.sh"

# Additional notes
echo ""
echo "=== Additional Notes ==="
echo "1. Impacket scripts are available in: $(python3 -c 'import impacket; print(impacket.__path__[0])')/examples/"
echo "2. You may need to run some Python tools with 'python3 -m' prefix"
echo "3. For Obsidian, if using AppImage, you may need to install additional dependencies"
echo "4. Some tools may require additional configuration for full functionality"
echo "5. i3 window manager: Run 'i3-config-wizard' to create initial config, or copy from /etc/i3/config"
